<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">



     <!--注入dao,service,依赖关系-->

    <!--扫描哪些包-->
    <context:component-scan base-package="com.aistar"></context:component-scan>
    <!--基于注解的方式配置-->
    <context:annotation-config></context:annotation-config>


    <!--导入数据源文件：dbconn.properties-->
    <context:property-placeholder location="config/dbconn.properties"></context:property-placeholder>



    <!--注入数据源 DataSource:连接数据库
            子类：DriverManagerDataSource   父接口：DataSource
            数据源获得  SpringEL
    -->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>

    <!--注入 JdbcTemplate-->
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
       <property name="dataSource" ref="dataSource"></property>
    </bean>

    <!--日志记录
    注入日志
        切面 Aspect class类 LogUtil类
        增强实现 Advice
        切点 PointCut
        target 目标类    ProductServiceImpl类
    -->
    <!--<bean id="logUtil" class="com.aistar.util.LogUtil"></bean>-->
    <!--<aop:config>-->
        <!--<aop:aspect id="myAspect" ref="logUtil">-->
            <!--<aop:pointcut id="pc" expression="execution(* com.aistar.service.ProductService.add*(..))-->
                                                        <!--||execution(* com.aistar.service.ProductService.update*(..))-->
                                                         <!--||execution(* com.aistar.service.ProductService.delete*(..))"/>-->
            <!--<aop:after method="addLog" pointcut-ref="pc"/>-->
        <!--</aop:aspect>-->
    <!--</aop:config>-->


    <!--AOP基于注解实现 日志-->
    <context:annotation-config></context:annotation-config>
    <context:component-scan base-package="com.aistar"></context:component-scan>
    <aop:aspectj-autoproxy></aop:aspectj-autoproxy>


    <!--=======================事务管理===========================================-->
    <!--
            编程式事务，即 事务的硬代码 直接穿插在业务中
            事务与业务的耦合性较大，与日志一样，从核心业务中分离出来
            事务属于服务型业务，可以横切到核心业务中
            即由Spring容器通过AOP的方式   管理事务
    -->
    <!--1.注入事务对象-->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>

    <!--2.AOP横切事务到 service.add,update,delete中
            切面 aspect
            切点 pointcut
            增强实现 advice
    -->
    <aop:config>
        <aop:pointcut id="pc" expression="execution(* com.aistar.service..*.*(..))"></aop:pointcut>
        <aop:advisor advice-ref="tx_advice" pointcut-ref="pc"></aop:advisor>
    </aop:config>

    <!--3.定义增强实现（定义了事务的属性-传播行为）tx:TransactionXML-->
        <tx:advice id="tx_advice" transaction-manager="transactionManager">
            <tx:attributes>
                <tx:method name="add*" propagation="REQUIRED"/>
                <tx:method name="update*" propagation="REQUIRED"/>
                <tx:method name="delete*" propagation="REQUIRED"/>
                <tx:method name="getAll*" propagation="REQUIRED" read-only="true"/>
            </tx:attributes>
        </tx:advice>
</beans>
